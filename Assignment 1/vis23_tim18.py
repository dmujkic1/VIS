# -*- coding: utf-8 -*-
"""VIS23-TIM18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xZH5owBa276FksdKZIC0lnVFEAtzjaCM

<font size="+2" face="verdana" color="red">Tim je zajedno radio na svim zadacima. </font>
"""

!git clone https://github.com/Senka2112/VIS2023-datasets

#importovanje biblioteka
import plotly
import matplotlib
import statistics
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.subplots as sp
import plotly.graph_objs as go
import numpy as np
from IPython.display import HTML
from prettytable import PrettyTable

#podesavanje fonta
shell = get_ipython()

def adjust_font_size():
  display(HTML('''<style>
    body {
      font-size: 18px;
    }
  '''))

if adjust_font_size not in shell.events.callbacks['pre_execute']:
  shell.events.register('pre_execute', adjust_font_size)

"""# **Prikaz podataka**

<br>
<font size="+1" face="verdana" color="blue"> Prikazivanje  DataFrame-a </font>
"""

sal = pd.read_csv('VIS2023-datasets/ForbesRichestAtheletes.csv') #učitavanje podataka u matricu sal
sal.style

"""<br><br>
<font size="+1" face="verdana" color="blue"> Prikazivanje osnovnih informacija o DataFrame-u </font>

"""

sal.info()
print('\n')

"""# **Analiza zarade**

<br>
<font size="+1" face="verdana" color="blue"> Prikazivanje  osnovnih informacija o zaradi </font>
"""

sal.describe()

"""<br> <br>
<font size="+1" face="verdana" color="blue"> ZARADA: </font>

<font size="+0" face="verdana" color="black">
  <ul>
    <li>Prosjecna zarada je $ 45 Milliona.</li>
    <li>Minimum je $ 8 Milliona.</li>
    <li>50% sportista imaju zaradu ispod $ 39 Milliona.</li>
    <li>Maksimalna zarada je $ 300 Milliona.</li>
  </ul>
</font>

<br> <br>
<font size="+1" face="verdana" color="blue"> Srednja vrijednost, mediana, moda plata</font>
"""

srednja_vrijednost = statistics.mean(sal['earnings ($ million)'])
print("\n Srednja vrijednost plata iznosi ",int(srednja_vrijednost), "miliona $")

moda = statistics.mode(sal['earnings ($ million)'])
print("\n Moda plata iznosi", moda, "miliona $")

mediana = statistics.median(sal['earnings ($ million)'])
print("\n Medianaplata iznosi", mediana, "miliona $")

"""
<br> <br>
<font size="+1" face="verdana" color="blue">Scatter plot</font>"""

plt.figure(figsize=(9, 6))
god = sal['Year'] #izdvajanje  kolone matrice sal u niz experience
salary = sal['earnings ($ million)']#izdavajanje kolone matrice sal u niz salary
#plt.gca().invert_xaxis()
plt.scatter(god, salary) #predstavljanje podataka scatter prikazom, godina će biti na x osi a salary na y osi
plt.title('Scatter plot porast plate')
plt.xlabel('Godina')
plt.ylabel('Plata')
plt.show()

"""
<br> <br>
<font size="+1" face="verdana" color="blue">Histogram</font>"""

plt.figure(figsize=(9, 6))
plt.hist(salary, bins=50) #histogram vrijednosti plate, 10 je broj stupaca
plt.title('Histogram vrijednosti plate')
plt.xlabel('Plata($ million)')
plt.ylabel('Broj osoba')
plt.show()

"""<br> <br>
<font size="+1" face="verdana" color="blue">Boxplot</font>
"""

df = pd.DataFrame({'Plata': salary})
fig = px.box(df,   y='Plata', points='all')
fig.update_layout(width=830, height=600)
fig.update_traces(boxpoints='all', jitter=1)
fig.show()

"""# **Kakva je zastupljenost pojedinih sportova i zarada?**

<br>
<font size="+1" face="verdana" color="blue">Ispravak naziva sportova</font>
"""

#fix duplih sportova (kolona Sport)  (Golf/golf, basketball/Basketball... etc) -- > lowercase
import warnings
warnings.filterwarnings("ignore")
sal['Sport']=sal['Sport'].str.lower()
replace_dict={'auto racing': 'f1 racing', 'f1 motorsports': 'f1 racing'}
sal['Sport']=sal['Sport'].replace(replace_dict)
index = 0
for x in sal['Sport']:
  if(x == 'american football / baseball'):
    sal['Sport'][index]='american football'

  elif( x == 'auto racing (nascar)' ):
    sal['Sport'][index]='nascar'

  elif( x == 'nba' ):
    sal['Sport'][index]='basketball'

  elif( x == 'hockey' ):
    sal['Sport'][index]='ice hockey'

  elif( x == 'nfl' ):
    sal['Sport'][index]='american football'

  elif( x == 'F1 Motorsports / auto racing' ):
    sal['Sport'][index]='F1 racing'

  elif(x != 'NASCAR' and x != 'MMA' and x != "F1 racing" and x != "NFL" and x != "F1 Motorsports" and x != "NBA" and x != "NFL"):
    sal['Sport'][index]=x.lower()
    #sal['Sport'][x]=sal['Sport'][x].lower()
  else: sal['Sport'][index]=x

  index = index + 1
#warnings.filterwarnings("default")

"""<br> <br>
<font size="+1" face="verdana" color="blue">Zastupljenost sportova sa liste (bar plot)</font>
"""

plt.figure(figsize=(9, 6))
plot = sal['Sport'].value_counts().plot(kind = 'barh', grid = True, title='Zastupljenost sportova')

"""<br> <br>
<font size="+1" face="verdana" color="blue">CODE</font>
"""

#kreiranje nizova
sportovi = []
srednjaa = []
modaa = []
mediann = []
BrojSportista = []

#kreiranje prazne mape
mojaMapa = {}
brojacZaKey = 0


#ubacivanje elemenata u listu(niz)
for x in sal['Sport']:
  var1 = 0
  for y in sportovi:
    if( x.lower() == y.lower() ): var1 = 1
  if( var1 == 0 and x!= "american football / baseball"): sportovi.append(x)
#print(sportovi)


# sumiranje plata
"""
sportoviValues = []
for x in sportovi:
  pom = 0
  pom = pom + sal.loc[sal['Sport'] == x, 'earnings ($ million)'].sum()
  if(pom == 0):
    pom = pom + sal.loc[sal['Sport'] == x.lower(), 'earnings ($ million)'].sum()
  sportoviValues.append(pom)
"""

#kreiranje tabele
tabela = PrettyTable(["Sportovi", "prosjecna plata($ million)", "median($ million)", "moda($ million)", "broj sportista"])
i = 0

#proracun i ubacivanje vrijednosti u tabelu
for x in sportovi:
  pomniz = []
  brojac = -1
  for var in sal['Sport']:
    brojac+=1
    if(var == x):
      pomniz.append(int(sal['earnings ($ million)'][brojac]))
  mojaMapa[brojacZaKey] = pomniz
  brojacZaKey+=1
  srednjaa.append( statistics.mean(pomniz) )
  modaa.append(statistics.mode(pomniz) )
  mediann.append(statistics.median(pomniz))
  BrojSportista.append(len(pomniz))
  tabela.add_row([x, int(srednjaa[i]), int(mediann[i]), int(modaa[i]), len(pomniz)])
  i+=1

"""<br> <br>
<font size="+1" face="verdana" color="blue"> Srednja vrijednost, median i moda plata kod svih sportova</font>
"""

print(tabela)

# Iscrtavanje grafa
plt.plot(sportovi, srednjaa, label='Srednja vrijednost')
plt.plot(sportovi, BrojSportista, label='Broj sportista')
plt.plot(sportovi, mediann, label='Medijan')
plt.xlabel('')
plt.xticks(rotation=90)
plt.ylabel('value')
plt.title('Graf osnovnih statističkih mjera')
plt.legend()
plt.show()

"""<br> <br>
<font size="+1" face="verdana" color="blue"> Box plotovi svih sportova </font>
"""

i = 0
for k in range(7):
  data1 = np.array(mojaMapa[i])
  data2 = np.array(mojaMapa[i+1])

  # kreiranje supgrafikona s zajedničkom y-osom
  fig = sp.make_subplots(rows=1, cols=2, shared_yaxes=True)

  # dodavanje prvog boxplot grafa
  fig.add_trace(
      go.Box(y=data1, name=sportovi[i], boxpoints='all',
            boxmean=True, jitter=0.3, pointpos=-1.8, marker=dict(size=4, color='red')),
      row=1, col=1
  )

  # Konfiguracija grafa 1
  fig.update_xaxes(title_text=sportovi[i], row=1, col=1)
  fig.update_traces(yaxis="y1", row=1, col=1)

  # dodavanje drugog boxplot grafa
  fig.add_trace(
      go.Box(y=data2, name=sportovi[i+1], boxpoints='all',
            boxmean=True, jitter=0.3, pointpos=-1.8, marker=dict(size=4, color='blue')),
      row=1, col=2
  )

  # Konfiguracija grafa 2
  fig.update_xaxes(title_text=sportovi[i+1], row=1, col=2)
  fig.update_traces(yaxis="y1", row=1, col=2)

  # konfiguriranje naslova i oznaka osi
  fig.update_layout(title='', yaxis=dict(title='Plata'))

  # prikazivanje grafa
  fig.show()
  print('\n')
  i+=2

"""<br>
<font size="+1" face="verdana" color="blue">ZAKLJUČAK</font>

<font size="+0" face="verdana" color="black">
Vidimo da kod vecine box plotova možemo doi do pouzdanih statističkih mjera.
Primjećujemo da neki od njih imaju manje od 5 uzoraka i da je to nedovoljno za izvlačenje pouzdanih zaključaka te da bi to moglo uticati na pouzdanost analize.
<br>
Vidimo da je kod zastupljenijih sportova medijan manji od srednje vrijednosti što ukazuje na lijevo asimetričnu distribuciju plata koja je uglavnom između 20 i 100 miliona$, te da sportovi 'boxing' i 'auto racing' imaju više extremnih vrijednosti.
</font>
<br>

# **Kakva je zastupljenost pojedinih zemalja i zarada?**

<br>
<font size="+1" face="verdana" color="blue">Zastupljenost zemalja sa liste(bar plot)</font>
"""

plt.figure(figsize=(9, 6))
plot = sal['Nationality'].value_counts().plot(kind = 'barh', grid = True, title='Zastupljenost zemalja')

"""<br> <br>
<font size="+1" face="verdana" color="blue">CODE</font>
"""

#kreiranje nizova
zemlje = []
srednjaa = []
modaa = []
mediann = []
BrojSportista = []

#kreiranje prazne mape
MapaZemalja = {}
brojacZaKey = 0


#ubacivanje elemenata u listu(niz)
for x in sal['Nationality']:
  var1 = 0
  for y in zemlje:
    if( x == y ): var1 = 1
  if( var1 == 0 ): zemlje.append(x)

#kreiranje tabele
tabela = PrettyTable(["Nationality", "prosjecna plata($ million)", "median($ million)", "moda($ million)", "broj sportista"])
i = 0

#proracun i ubacivanje vrijednosti u tabelu
for x in zemlje:
  pomniz = []
  brojac = -1
  for var in sal['Nationality']:
    brojac+=1
    if(var == x):
      pomniz.append(int(sal['earnings ($ million)'][brojac]))
  MapaZemalja[brojacZaKey] = pomniz
  brojacZaKey+=1
  srednjaa.append( statistics.mean(pomniz) )
  modaa.append(statistics.mode(pomniz) )
  mediann.append(statistics.median(pomniz))
  BrojSportista.append(len(pomniz))
  tabela.add_row([x, int(srednjaa[i]), int(mediann[i]) , int(modaa[i]), len(pomniz)])
  i+=1

"""<br> <br>
<font size="+1" face="verdana" color="blue"> Srednja vrijednost, median i moda plata u svim zemljama</font>
"""

print(tabela)

# Iscrtavanje grafa
plt.plot(zemlje, srednjaa, label='Srednja vrijednost')
plt.plot(zemlje, BrojSportista, label='Broj sportista')
plt.plot(zemlje, mediann, label='Medijan')
plt.xlabel('X os')
plt.xticks(rotation=90)
plt.ylabel('Y os')
plt.title('Graf osnovnih statističkih mjera')
plt.legend()
plt.show()

"""<br> <br>
<font size="+1" face="verdana" color="blue"> Box plotovi svih zemalja </font>
"""

i = 0
for k in range(11):
  data1 = np.array(MapaZemalja[i])
  data2 = np.array(MapaZemalja[i+1])

  # kreiranje supgrafikona s zajedničkom y-osom
  fig = sp.make_subplots(rows=1, cols=2, shared_yaxes=True)

  # dodavanje prvog boxplot grafa
  fig.add_trace(
      go.Box(y=data1, name=zemlje[i], boxpoints='all',
            boxmean=True, jitter=0.3, pointpos=-1.8, marker=dict(size=4, color='red')),
      row=1, col=1
  )

  # Konfiguracija grafa 1
  fig.update_xaxes(title_text=zemlje[i], row=1, col=1)
  fig.update_traces(yaxis="y1", row=1, col=1)

  # dodavanje drugog boxplot grafa
  fig.add_trace(
      go.Box(y=data2, name=zemlje[i+1], boxpoints='all',
            boxmean=True, jitter=0.3, pointpos=-1.8, marker=dict(size=4, color='blue')),
      row=1, col=2
  )

  # Konfiguracija grafa 2
  fig.update_xaxes(title_text=zemlje[i+1], row=1, col=2)
  fig.update_traces(yaxis="y1", row=1, col=2)

  # konfiguriranje naslova i oznaka osi
  fig.update_layout(title='', yaxis=dict(title='Plata'))

  # prikazivanje grafa
  fig.show()
  print('\n')
  i+=2

"""<br>
<font size="+1" face="verdana" color="blue">ZAKLJUČAK</font>

<font size="+0" face="verdana" color="black">
Vidimo da kod većine box plotova možemo doći do pouzdanih statističkih mjera.
Primjećujemo da neki od njih imaju manje od 5 uzoraka i da je to nedovoljno za izvlačenje pouzdanih zaključaka te da bi to moglo uticati na pouzdanost analize.
<br>
Vidimo da je kod većine zemalja medijan manji od srednje vrijednosti što ukazuje na lijevo asimetričnu distribuciju plata koja je uglavnom između 20 i 100 miliona$, te da 'USA' ima više ekstremnih vrijednosti.
<br>
Zemlje 'UK' i 'Switzerland' imaju jasno izraženu pozitivno asimetričnu(desno as.) distribuciju
</font>
<br>

# **Koji su najplaćeniji sportisti?**

<br>
<font size="+1" face="verdana" color="blue"> 10 najplaćenijih sportista u razdbolju 1990-2020</font>
"""

plt.figure(figsize=(30,10))
sal.groupby("Name")["earnings ($ million)"].sum().sort_values(ascending=False).head(10).plot(kind="bar", color="#ADD8E6")
plt.xticks(fontsize = 25)
plt.xticks(rotation=90)

"""<br> <br>
<font size="+1" face="verdana" color="blue"> Deset najplaćenijih sportista kroz desetljeća </font>
"""

plt.figure(figsize=(30,10))
sal[sal['Year'].between(1990, 2000)].groupby("Name")["earnings ($ million)"].sum().sort_values(ascending=False).head(10).plot(kind="bar", color="#D8BFD8")
plt.xticks(fontsize = 25, rotation=90)
plt.title('Top 10 najplaćenijih sportista (1990-2000)', fontsize=25)
plt.ylabel('Earnings ($ million)', fontsize=25)
plt.xlabel('Name', fontsize=25)
plt.show()

plt.figure(figsize=(30,10))
sal[sal['Year'].between(2000, 2010)].groupby("Name")["earnings ($ million)"].sum().sort_values(ascending=False).head(10).plot(kind="bar", color="#ADD8E6")
plt.xticks(fontsize = 25, rotation=90)
plt.title('Top 10 najplaćenijih sportista (2000-2010)', fontsize=25)
plt.ylabel('Earnings ($ million)', fontsize=25)
plt.xlabel('Name', fontsize=25)
plt.show()

plt.figure(figsize=(30,10))
sal[sal['Year'].between(2010, 2020)].groupby("Name")["earnings ($ million)"].sum().sort_values(ascending=False).head(10).plot(kind="bar", color="#D8BFD8")
plt.xticks(fontsize = 25, rotation=90)
plt.title('Top 10 najplaćenijih sportista (2010-2020)', fontsize=25)
plt.ylabel('Earnings ($ million)', fontsize=25)
plt.xlabel('Name', fontsize=25)
plt.show()

"""<br>
<font size="+1" face="verdana" color="blue">ZAKLJUČAK</font>

<font size="+0" face="verdana" color="black">
Vidimo da je većina najplaćenijih sportista svih vremena (gledajući posljednja tri desetljeća), slavu i veliku zaradu stekla od 2000. do 2020. godine.
<br>

<br> <br>
<font size="+1" face="verdana" color="blue">Sportaši koji su zauzeli 1. mjesto na Forbesovoj listi</font>
"""

rank = sal[sal['Current Rank']== 1]

fig = px.bar(rank, x = 'Current Rank', y = 'Name', title='Sportaši koji su zauzeli 1. mjesto na Forbesovoj listi', labels={"Name": "Athletes", "Current Rank": "Times atheletes placed rank 1"}, color_discrete_sequence=['#1f77b4'])
fig.update_layout(yaxis_categoryorder = 'total ascending', title_x=0.5)
fig.show()

"""<br> <br>
<font size="+1" face="verdana" color="blue">Zarada Tiger Woodsa tokom vremena</font>
"""

tiger_sal = sal[sal['Name'] == 'Tiger Woods']

yearly_earnings = tiger_sal.groupby('Year')['earnings ($ million)'].sum()

plt.plot(yearly_earnings.index, yearly_earnings.values, marker='o')

plt.title('Zarada Tiger Woodsa tokom vremena')
plt.xlabel('Year')
plt.ylabel('earnings ($ million)')

plt.show()

"""<br>
<font size="+1" face="verdana" color="blue">ZAKLJUČAK</font>

<font size="+0" face="verdana" color="black">
Tiger Woods je kao najplaćeniji sportista gledajući posljednja tri desetljeća, najviše puta bio 1. na Forbesovoj listi. Vrhunac svoje zarade dostiže 2008. godine kada ona iznosi 115 miliona $. Zatim ona opada do 2012. godine, a 2013. doživljava nagli skok, nakon čega opet opada sve do 2020. godine kada opet počinje rasti.
<br>

<br> <br>
<font size="+1" face="verdana" color="blue">Na osnovu najplaćenijeg sportiste svakog sporta, koji sport je najbolje plaćen, a koji najslabije?</font>
"""

top_earners = sal.sort_values('earnings ($ million)', ascending=False).groupby('Sport').first().reset_index()

table = go.Table(
    header=dict(
        values=['Sport', 'Name', 'Earnings ($ million)'],
        fill_color='#f2f2f2',
        align=['left', 'center'],
        font=dict(size=16),
        height=40
    ),
    cells=dict(
        values=[top_earners.Sport, top_earners.Name, top_earners['earnings ($ million)']],
        fill_color='#ffffff',
        align=['left', 'center'],
        font=dict(size=14),
        height=30
    )
)

layout = go.Layout(
    title='Najplaćeniji sportista svakog sporta',
    title_font=dict(size=24),
    title_x=0.5,
    height=600,
    width=800,
)

fig = go.Figure(data=[table], layout=layout)

fig.show()

"""<br>
<font size="+1" face="verdana" color="blue">ZAKLJUČAK</font>

<font size="+0" face="verdana" color="black">
Iz priloženog se vidi da je boks najplaćeniji sport sa preko 100 miliona $ prednosti nad drugim najplaćenijim sportom po redu, to jeste fudbalom. Treći najplaćeniji sport jeste golf čiji je najplaćeniji igrač Tiger Woods, poznat kao najplaćeniji sportista u razdoblju 2000-2010 godine.
<br>
S druge strane, najslabije plaćen sport jeste biciklizam, s obzirom da najplaćeniji biciklista ima najmanji iznos plate.
<font>
<br>

<br> <br>
<font size="+1" face="verdana" color="blue">Koji su najbolje plaćeni sportisti u SAD-u?</font>
"""

import pandas as pd

# Učitavanje podataka iz CSV datoteke
data=pd.read_csv ('https://raw.githubusercontent.com/Senka2112/VIS2023-datasets/main/ForbesRichestAtheletes.csv')


# Unos zemlje ili regiona za koji želite da saznate najbolje plaćene sportiste
zemlja_ili_region = "USA"

# Filtriranje podataka na osnovu zemlje ili regiona
sportisti_zemlja_ili_region = sal[sal['Nationality'] == zemlja_ili_region]

# Sortiranje sportista prema zaradi u padajućem redosledu
sportisti_zemlja_ili_region = sportisti_zemlja_ili_region.sort_values('earnings ($ million)', ascending=False)
sal=sal.drop_duplicates(subset='Name')

# Prikaz top 10 najbolje plaćenih sportista za određenu zemlju ili region
top_10_sportista_zemlja_ili_region = sportisti_zemlja_ili_region.head(10)
print(top_10_sportista_zemlja_ili_region[['Name', 'earnings ($ million)']])

"""# **Koja je vjerovatnoća da je sportaš zaradio više od 100 miliona dolara u karijeri?**"""

# učitavanje podataka
data = pd.read_csv("https://raw.githubusercontent.com/Senka2112/VIS2023-datasets/main/ForbesRichestAtheletes.csv")

# grupisanje po imenu sportista i sabiranje vrijednosti u koloni "earnings ($ million)"
career_earnings = data.groupby("Name")["earnings ($ million)"].sum()

# broj sportista koji su zaradili preko 100 miliona dolara tijekom karijere
num_rich = len(career_earnings[career_earnings >= 100])

# ukupan broj sportista u bazi podataka
total = len(career_earnings)

# vjerojatnost da je sportista zaradio više od 100 miliona dolara u karijeri
p = num_rich / total

print("Vjerojatnoća da je sportista zaradio preko 100 miliona dolara u karijeri je:", p)

# učitavanje podataka
data = pd.read_csv("https://raw.githubusercontent.com/Senka2112/VIS2023-datasets/main/ForbesRichestAtheletes.csv")

# izračunavanje karijernih zarada sportista
career_earnings = data.groupby("Name")["earnings ($ million)"].sum()

# izračunavanje broja sportista koji su zaradili manje od 100 miliona dolara i onih koji su zaradili 100 miliona ili više
num_poor = len(career_earnings[career_earnings < 100])
num_rich = len(career_earnings[career_earnings >= 100])

# stvaranje pie charta
labels = ["Zaradili manje od $100M", "Zaradili $100M ili više"]
sizes = [num_poor, num_rich]
colors = ["red", "green"]
explode = (0.1, 0)  # izdvoji prvi segment
plt.pie(sizes, labels=labels, explode=explode, colors=colors, autopct="%1.1f%%", shadow=True, startangle=90, textprops={'fontsize': 14})
plt.title("Udio sportista prema karijernim zaradama", fontdict={'fontsize': 18})
plt.axis("equal")

# legenda za pie chart
plt.legend(title="Karijerne zarade", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))

plt.show()

"""<br>
<font size="+1" face="verdana" color="blue">ZAKLJUČAK</font>

<font size="+0" face="verdana" color="black">
Iz navedenog python proračuna vidimo da je vjerovatnoća da je sportista zaradio preko 100 milion dolara približna 33% što je veoma impresivna brojka.
<br>

# **Koja je vjerovatnoća da je sportista iz Brazila, ako znamo da je zaradio preko 200 miliona dolara tokom svoje karijere (Bayesova teorema)**
"""

# Učitavanje podataka
data = pd.read_csv("https://raw.githubusercontent.com/Senka2112/VIS2023-datasets/main/ForbesRichestAtheletes.csv")

# Izračunavanje vjerojatnoće da je sportista iz Brazila
num_bra_athletes = len(data[data["Nationality"] == "Brazil"])
total_athletes = len(data["Name"].unique())
prob_bra = num_bra_athletes / total_athletes
print("Vjerojatnoća da je sportista iz Brazila: {:.2%}".format(prob_bra))

# Izračunavanje vjerojatnoće da je sportista zaradio preko 200 miliona dolara
rich_athletes = data.groupby("Name")["earnings ($ million)"].sum() >= 200
num_rich_athletes = len(rich_athletes[rich_athletes])
total_athletes = len(data["Name"].unique())
prob_rich = num_rich_athletes / total_athletes
print("Vjerojatnoća da je sportista zaradio preko 200 miliona dolara: {:.2%}".format(prob_rich))

# Izračunavanje vjerojatnosti da je sportista iz Brazila, ako znamo da je zaradio preko 200 miliona dolara
rich_athletes = data.groupby("Name")["earnings ($ million)"].sum() >= 200
num_rich_athletes = len(rich_athletes[rich_athletes])
bra_rich_athletes = data[data["Nationality"] == "Brazil"].groupby("Name")["earnings ($ million)"].sum() >= 200
num_bra_rich_athletes = len(bra_rich_athletes[bra_rich_athletes])
prob_bra_given_rich = num_bra_rich_athletes / num_rich_athletes
print("Vjerojatnoća da je sportista iz Brazila, ako znamo da je zaradio preko 200 miliona dolara: {:.2%}".format(prob_bra_given_rich))

"""<br>
<font size="+1" face="verdana" color="blue">ZAKLJUČAK</font>

<font size="+0" face="verdana" color="black">
Pomocu sljedeće formule smo dobili gore navedeni proračun:
P(A|B) = P(B|A) * P(A) / P(B)

Gdje je:
*   P(A|B) uvjetna vjerojatnoća da se događaj A dogodi kada se događaj B već dogodio.
*   P(B|A) uvjetna vjerojatnoća da se događaj B dogodi kada se događaj A već dogodio.
*   P(A) vjerojatnoća da se događaj A dogodi.
*   P(B) vjerojatnoća da se događaj B dogodi.
<br>

# **Da li postoji korelacija između ranka sportista i njihove zarade?**
"""

import pandas as pd

data = pd.read_csv('https://raw.githubusercontent.com/Senka2112/VIS2023-datasets/main/ForbesRichestAtheletes.csv')

corr = data["Current Rank"].corr(data["earnings ($ million)"])

print("Korelacija između ranka sportiste i njegove zarade (tokom posmatrane godine): {:.2f}".format(corr))

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('https://raw.githubusercontent.com/Senka2112/VIS2023-datasets/main/ForbesRichestAtheletes.csv')

corr = data["Current Rank"].corr(data["earnings ($ million)"])

plt.scatter(data["Current Rank"], data["earnings ($ million)"])
plt.plot(data["Current Rank"], data["Current Rank"]*corr, color='red', label='Linija trenda')
plt.scatter(data["Current Rank"], data["earnings ($ million)"], color='blue', label='Sportisti')
plt.xlabel("Trenutni rang sportiste")
plt.ylabel("Zarada (u milionima dolara)")
plt.legend()
plt.show()

"""<br>
<font size="+1" face="verdana" color="blue">ZAKLJUČAK</font>

<font size="+0" face="verdana" color="black">
Korelacija između ove dvije varijable je negativna i iznosi -0.45 što znači da brojčanim porastom varijable Ranka (što zapravo predstavlja niži rank) opada zarada sportiste, tj. da se dvije varijable ponašaju konstrastno jedna drugoj. Razlike u zaradi na grafiku ipak nisu ogromne jer se u našoj bazi podataka spominju većinom samo vrhunski sportaši koji su uglavnom postigli dobre rezultate i ogromne zarade.
<br>

# **Da li vidimo trend inflacije u samoj plati kroz godine?**
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

data = pd.read_csv('https://raw.githubusercontent.com/Senka2112/VIS2023-datasets/main/ForbesRichestAtheletes.csv')

# Grupiramo podatke po godini i saberemo sve zarade u toj godini
yearly_earnings = data.groupby('Year')['earnings ($ million)'].sum()

# Crtamo grafikon
plt.plot(yearly_earnings.index, yearly_earnings.values, label='Ukupna zarada')
plt.xlabel('Godina')
plt.ylabel('Ukupna zarada (u milionima dolara)')
plt.title('Ukupna zarada sportista po godinama')

# Dodajemo liniju trenda
coefficients = np.polyfit(yearly_earnings.index, yearly_earnings.values, 1)
trendline = np.polyval(coefficients, yearly_earnings.index)
plt.plot(yearly_earnings.index, trendline, color='red', alpha=0.5, label='Linija trenda')

plt.legend()
plt.show()

# Grupišemo podatke po godini i saberemo sve zarade u toj godini
yearly_earnings = data.groupby('Year')['earnings ($ million)'].sum()

# Pronalazimo godinu s najvećom zaradom
max_earnings_year = yearly_earnings.idxmax()
max_earnings = yearly_earnings[max_earnings_year]

# Ispisujemo rezultat
print(f"Godina s najvećom zaradom: {max_earnings_year} - {max_earnings:.2f} miliona dolara")

"""<br>
<font size="+1" face="verdana" color="blue">ZAKLJUČAK</font>

<font size="+0" face="verdana" color="black">
Vidimo da je trend inflacije itekako prisutan i u platama sportista, a lahko je pretpostaviti da taj trend sa današnjim marketingom neće zastati u bližoj budućnosti.
<br>

# **Koja je vjerovatnoća da je sportista zaradio više od 50 miliona ukoliko je košarkaš?**
"""

import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/Senka2112/VIS2023-datasets/main/ForbesRichestAtheletes.csv')

p_a_and_b = len(df[(df['Sport'] == 'Basketball') & (df['earnings ($ million)'] > 50)]) / len(df)

p_b = len(df[df['Sport'] == 'Basketball']) / len(df)

# uslovna vjerovatnoca
p_a_given_b = p_a_and_b / p_b

# Print the result
print("Vjerovatnoća da će sportista zaraditi više od 50 miliona godišnje pod uslovom da je košarkaš je ", p_a_given_b, "odnosno {:.2%}".format(p_a_given_b))

"""# **Koja je vjerovatnoća da će se na popisu naći Tiger Woods?**"""

import pandas as pd

df = pd.read_csv('https://github.com/Senka2112/VIS2023-datasets/raw/main/ForbesRichestAtheletes.csv')

# Izdvojimo redove koji sadrže Tiger Woodsa
tiger_woods = df[df['Name'] == 'Tiger Woods']

# Izračunamo broj godina u kojima se Tiger Woods pojavio na popisu najplaćenijih sportaša
broj_godina_tiger_woods = len(tiger_woods['Year'].unique())

# Izračunamo ukupan broj godina u skupu podataka
ukupno_godina = len(df['Year'].unique())

# Izračunamo vjerovatnost da će se Tiger Woods pojaviti na popisu najplaćenijih sportaša
vjerovatnoca = broj_godina_tiger_woods / ukupno_godina

# Ispišite rezultat
print("Vjerovatnoća da će se Tiger Woods pojaviti na popisu najplaćenijih sportaša: ", vjerovatnoca,", odnosno {:.2%}".format(vjerovatnoca))

"""# **Koja je kovarijansa između zarade sportista i države iz koje potječu?**"""

df = pd.read_csv('https://raw.githubusercontent.com/Senka2112/VIS2023-datasets/main/ForbesRichestAtheletes.csv')

# mijenjamo vrijednosti u stupcu Nationality iz stringova u numeričke vrijednosti
country_numeric, _ = pd.factorize(df['Nationality'])

net_worth = df['earnings ($ million)']
country = country_numeric

# izračunamo kovarijansu između neto vrijednosti sportaša i brojčane vrijednosti država
covariance = np.cov(net_worth, country, ddof=0)[0][1]

# konacna kovarijansa
print("Kovarijansa između zarade sportista i države iz koje potječu:", covariance)

"""# **Koja je raspodjela po sportovima? Bavi li se više sportista, sa liste najbogatijih, idividualnim ili timskim sportovima?**"""

import pandas as pd
import matplotlib.pyplot as plt

# Učitavanje podataka
df = pd.read_csv('https://raw.githubusercontent.com/Senka2112/VIS2023-datasets/main/ForbesRichestAtheletes.csv')

# Pretvaranje naziva sportova u isti format i uklanjanje duplikata sportista
df['Sport'] = df['Sport'].str.lower() # Pretvaranje svih slova u mala slova
df['Sport'] = df['Sport'].str.strip() # Uklanjanje razmaka na početku i kraju naziva sporta
df = df.drop_duplicates(subset=['Name', 'Sport']) # Uklanjanje duplikata sportista u istom sportu

# Broj igrača u timskim sportovima
team_sports = ['basketball', 'american football', 'baseball', 'soccer', 'hockey', 'american football/baseball', 'nfl', 'ice hockey', 'nba']
num_team_sports = len(df[df['Sport'].isin(team_sports)])

# Broj igrača u individualnim sportovima
individual_sports = ['boxing', 'mma', 'golf', 'tennis', 'auto racing', 'cycling', 'f1 motorsports', 'nascar', 'auto racing (nascar)', 'f1 racing', 'motorcycle gp']
num_individual_sports = len(df[df['Sport'].isin(individual_sports)])

# Kreiranje pie charta
labels = ['Timski sportovi', 'Individualni sportovi']
sizes = [num_team_sports, num_individual_sports]
colors = ['#FEBBBB', '#BFE1F8']
explode = (0.1, 0)
fig, ax = plt.subplots(figsize=(8, 8))
ax.pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%', startangle=90, explode=explode, shadow=True)
ax.axis('equal')
ax.set_title("Raspodjela sportova među najbogatijim sportašima", fontweight='bold', fontsize=14)
ax.legend(labels=labels, loc='upper left', bbox_to_anchor=(1.2, 0.5))
plt.setp(ax.get_legend().get_texts(), fontsize='12', fontweight='bold')
plt.subplots_adjust(left=0.005, bottom=0.005)
plt.show()

"""# **Kakav je rast zarade za top 10 najplaćenijih sportista u posljednjih deset godina?**"""

import pandas as pd
import matplotlib.pyplot as plt
data = pd.read_csv('https://raw.githubusercontent.com/Senka2112/VIS2023-datasets/main/ForbesRichestAtheletes.csv')

grouped_data = data.groupby('Name').sum().sort_values(by='earnings ($ million)', ascending=False)

# Izračunamo rast zarade za 10 najplaćenijih sportaša
growth_list = []
for name in grouped_data.index[:10]:
    group = data[data['Name'] == name]
    earnings_last_year = group.iloc[-1]['earnings ($ million)']
    earnings_first_year = group.iloc[0]['earnings ($ million)']
    growth = (earnings_last_year - earnings_first_year) / earnings_first_year
    growth_list.append(growth)
    print(f'{name}: {growth:.2%}')

# grafik
plt.bar(grouped_data.index[:10], growth_list, color='pink', edgecolor='black', linewidth=1.5)
plt.title('Rast zarade za top 10 najplaćenijih sportaša u posljednjih 10 godina', fontweight='bold', fontsize=16, loc='center', pad=20)
plt.xlabel('Sportista', fontweight='bold', fontsize=12)
plt.ylabel('Rast zarade (u milionima)', fontweight='bold', fontsize=12)
plt.xticks(rotation=90, fontsize=10)
plt.yticks(fontsize=10)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['bottom'].set_linewidth(1.5)
plt.gca().spines['left'].set_linewidth(1.5)
plt.gca().set_facecolor('white')
plt.grid(axis='y', alpha=0.5, linestyle='--')
plt.tight_layout()
plt.show()

"""<br>
<font size="+1" face="verdana" color="blue">ZAKLJUČAK</font>

<font size="+0" face="verdana" color="black">
Sa grafika zaključujemo da je gotovo svaki sportista u posljednjih 10 godina imao rast zarade preko 100 miliona dolara. Najveći rast zarade imao je Michael Jordan, a nakon njega Floyd Mayweather i Lionel Messi.
<br>

</font>
<br>
"""